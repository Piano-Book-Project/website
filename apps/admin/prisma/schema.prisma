// Prisma schema file
// 음악 재생 웹사이트용 샘플 DB 스키마

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Admin {
  id           Int      @id @default(autoincrement())
  username     String   @unique // ex: sysadmin
  password     String
  nickname     String
  createdAt    DateTime @default(now())
  lastLoginAt  DateTime?
  permissions  Permission[]
  menuAccess   MenuAccess[]
  refreshToken String? // JWT refresh token (optional)
}

model Permission {
  id           Int      @id @default(autoincrement())
  admin        Admin    @relation(fields: [adminId], references: [id])
  adminId      Int
  canEditPost  Boolean  @default(false)
  canDeletePost Boolean @default(false)
  canAddPost   Boolean  @default(false)
}

model MenuAccess {
  id        Int    @id @default(autoincrement())
  admin     Admin  @relation(fields: [adminId], references: [id])
  adminId   Int
  menuName  String
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique // ex: test01
  password     String
  nickname     String
  createdAt    DateTime @default(now())
  lastLoginAt  DateTime?
  playHistory  Playlist[]
}

model Playlist {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  artist     Artist   @relation("ArtistPlaylists", fields: [artistId], references: [id])
  artistId   Int
  song       Song     @relation("SongPlaylists", fields: [songId], references: [id])
  songId     Int
  isFavorite Boolean  @default(false)
  playedAt   DateTime @default(now())
}

model Category {
  id          Int          @id @default(autoincrement())
  code        String       @unique
  status      String       @default("active")
  name        String       @unique
  order       Int          @default(0)
  artists     Artist[]
  mainVisuals MainVisual[]
  createdAt   DateTime     @default(now())
  createdBy   String
  updatedAt   DateTime     @updatedAt
  updatedBy   String
  isActive    Boolean      @default(true)
}

model Artist {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  imageUrl    String?
  category    Category     @relation(fields: [categoryId], references: [id])
  categoryId  Int
  songs       Song[]
  mainVisuals MainVisual[]
  playlists   Playlist[]   @relation("ArtistPlaylists")
  createdAt   DateTime     @default(now())
  createdBy   String
  updatedAt   DateTime     @updatedAt
  updatedBy   String
  isActive    Boolean      @default(true)
}

model Song {
  id            Int          @id @default(autoincrement())
  title         String
  description   String?
  imageUrl      String?
  youtubeUrl    String?
  hasImage      Boolean      @default(false)
  hasAttachment Boolean      @default(false)
  pdfUrl        String?
  artist        Artist       @relation(fields: [artistId], references: [id])
  artistId      Int
  mainVisuals   MainVisual[]
  playlists     Playlist[]   @relation("SongPlaylists")
  createdAt     DateTime     @default(now())
  createdBy     String
  updatedAt     DateTime     @updatedAt
  updatedBy     String
  isActive      Boolean      @default(true)
  isFeaturedMainVisual Boolean @default(false)
  tags          Tag[]        @relation("SongTags")
}

model Tag {
  id        Int    @id @default(autoincrement())
  name      String @unique
  songs     Song[] @relation("SongTags")
  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime @updatedAt
  updatedBy String
  isActive  Boolean  @default(true)
}

model MainVisual {
  id           Int      @id @default(autoincrement())
  code         String   @unique
  category     Category @relation(fields: [categoryId], references: [id])
  categoryId   Int
  artist       Artist?  @relation(fields: [artistId], references: [id])
  artistId     Int?
  song         Song?    @relation(fields: [songId], references: [id])
  songId       Int?
  displayType  String   // 'image', 'youtube', 'streaming'
  imageUrl     String?
  youtubeUrl   String?
  streamingUrl String?
  isLive       Boolean  @default(false)
  liveStatus   String   @default("offline") // 'online', 'offline'
  order        Int      @default(0)
  createdAt    DateTime @default(now())
  createdBy    String
  updatedAt    DateTime @updatedAt
  updatedBy    String
  isActive     Boolean  @default(true)
} 